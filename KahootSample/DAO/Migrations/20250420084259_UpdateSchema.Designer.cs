// <auto-generated />
using System;
using DAO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAO.Migrations
{
    [DbContext(typeof(KahootDbContext))]
    [Migration("20250420084259_UpdateSchema")]
    partial class UpdateSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BOs.Model.GameSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<bool>("AutoAdvance")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableSpeedBonus")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableStreak")
                        .HasColumnType("bit");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LoadingInGame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowLeaderboard")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionId");

                    b.HasIndex("Pin")
                        .IsUnique();

                    b.HasIndex("QuizId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("BOs.Model.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayerId"));

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ranking")
                        .HasColumnType("int");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BOs.Model.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("CorrectOption")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Option4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BOs.Model.QuestionInGame", b =>
                {
                    b.Property<int>("QuestionInGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionInGameId"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("TotalMembers")
                        .HasColumnType("int");

                    b.HasKey("QuestionInGameId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SessionId");

                    b.ToTable("QuestionsInGame");
                });

            modelBuilder.Entity("BOs.Model.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("BOs.Model.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseId"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionInGameId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("ResponseTime")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SelectedOption")
                        .HasColumnType("int");

                    b.Property<int>("Streak")
                        .HasColumnType("int");

                    b.HasKey("ResponseId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("QuestionInGameId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("BOs.Model.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<double>("TotalScore")
                        .HasColumnType("float");

                    b.HasKey("TeamId");

                    b.HasIndex("SessionId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BOs.Model.TeamResultInGame", b =>
                {
                    b.Property<int>("TeamResultInGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamResultInGameId"));

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionInGameId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("TeamResultInGameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("QuestionInGameId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamResults");
                });

            modelBuilder.Entity("BOs.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BOs.Model.GameSession", b =>
                {
                    b.HasOne("BOs.Model.Quiz", "Quiz")
                        .WithMany("GameSessions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BOs.Model.Player", b =>
                {
                    b.HasOne("BOs.Model.GameSession", "Session")
                        .WithMany("Players")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOs.Model.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BOs.Model.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Session");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BOs.Model.Question", b =>
                {
                    b.HasOne("BOs.Model.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BOs.Model.QuestionInGame", b =>
                {
                    b.HasOne("BOs.Model.Question", "Question")
                        .WithMany("QuestionsInGame")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BOs.Model.GameSession", "Session")
                        .WithMany("QuestionsInGame")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BOs.Model.Quiz", b =>
                {
                    b.HasOne("BOs.Model.User", "CreatedByUser")
                        .WithMany("Quizzes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("BOs.Model.Response", b =>
                {
                    b.HasOne("BOs.Model.Player", "Player")
                        .WithMany("Responses")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOs.Model.QuestionInGame", "QuestionInGame")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionInGameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("QuestionInGame");
                });

            modelBuilder.Entity("BOs.Model.Team", b =>
                {
                    b.HasOne("BOs.Model.GameSession", "Session")
                        .WithMany("Teams")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BOs.Model.TeamResultInGame", b =>
                {
                    b.HasOne("BOs.Model.Player", null)
                        .WithMany("TeamResults")
                        .HasForeignKey("PlayerId");

                    b.HasOne("BOs.Model.QuestionInGame", "QuestionInGame")
                        .WithMany("TeamResults")
                        .HasForeignKey("QuestionInGameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BOs.Model.GameSession", "Session")
                        .WithMany("TeamResultsInGame")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BOs.Model.Team", "Team")
                        .WithMany("TeamResults")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuestionInGame");

                    b.Navigation("Session");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BOs.Model.GameSession", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("QuestionsInGame");

                    b.Navigation("TeamResultsInGame");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("BOs.Model.Player", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("TeamResults");
                });

            modelBuilder.Entity("BOs.Model.Question", b =>
                {
                    b.Navigation("QuestionsInGame");
                });

            modelBuilder.Entity("BOs.Model.QuestionInGame", b =>
                {
                    b.Navigation("Responses");

                    b.Navigation("TeamResults");
                });

            modelBuilder.Entity("BOs.Model.Quiz", b =>
                {
                    b.Navigation("GameSessions");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("BOs.Model.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("TeamResults");
                });

            modelBuilder.Entity("BOs.Model.User", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Quizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
